tosca_definitions_version: tosca_simple_yaml_1_0

imports:
  - indigo_custom_types: https://raw.githubusercontent.com/mtangaro/tosca-types/laniakea-galaxy/custom_types.yaml


description: >
  Deploy Galaxy on a single Virtual Machine using Ansible roles.
  The basic configuration includes CentOS 7, the selected Galaxy flavour, companion software and reference data.
  Configure, click on the "Submit" button, wait for the confirmation e-mail(s) and log in to your new Galaxy instance.
  If after some hours you do not receive any e-mail please be sure to check your SPAM BOX.

topology_template:

  inputs:

    # Instance config
    users:
      type: list
      description: list of users to create on the VM
      entry_schema:
        type: tosca.datatypes.indigo.User
      default: []
      required: false
    instance_flavor:
      type: string
      description: instance flavor (num_cpu, memory, disk)
      default: large
    storage_size:
      type: string
      description: storage memory required for the instance
      default: 50 GB      
    os_distribution:
      type: string
      default: centos
      description: Operating System distro
      constraints:
        - valid_values: [ "ubuntu", "centos" ]
    os_version:
      type: version
      default: 7
      description: Operating System distribution version
      constraints:
        - valid_values: [ 20.04, 7 ]

    # Storage encryption
    storage_encryption:
      type: boolean
      description: Enable storage encryption using Vault to store secrets and LUKS to encrypt
      default: False
      required: true
    vault_url:
      type: string
      description: Hashicorp Vault server url
      default: changeit
      required: false
    vault_wrapping_token:
      type: string
      description: Vault Wrapping token to write secret
      default: not_a_wrapping_token
      required: false
    vault_secret_path:
      type: string
      description: Vault path to store secret
      default: "subject/depuuid"
      required: false
    vault_secret_key:
      type: string
      description: Vault secret key name
      default: secret
      required: false

    # Galaxy config
    admin_email:
      type: string
      description: email of the admin user
      default: admin@admin.com
    admin_api_key:
      type: string
      description: key to access the API with admin role
      default: not_very_secret_api_key
    user:
      type: string
      description: username to launch the galaxy daemon
      default: galaxy
    version:
      type: string
      description: Galaxy version to install
      default: release_20.05
    instance_description:
      type: string
      description: galaxy instance description
      default: "ELIXIR"
    export_dir:
      type: string
      description: path to store galaxy data
      default: /export
    enable_galaxy_ie:
      type: boolean
      description: Enable Galaxy Interactive Environments (install docker)
      default: false

    # Galaxy tools config
    flavor:
      type: string
      description: Galaxy flavor for tools installation
      default: "galaxy-minimal"

  node_templates:

    luks_encryption:
      type: tosca.nodes.indigo.LuksEncryption
      properties:
        storage_encryption: { get_input: storage_encryption }
        vault_url: { get_input: vault_url }
        vault_wrapping_token: { get_input: vault_wrapping_token }
        vault_secret_path: { get_input: vault_secret_path }
        vault_secret_key: { get_input: vault_secret_key }
        #wn_ips: { get_attribute: [ lrms_wn, private_address ] }
      requirements:
        - host: galaxy_server

    galaxy:
      type: tosca.nodes.indigo.GalaxyPortal
      properties:
        admin_email: { get_input: admin_email }
        admin_api_key: { get_input: admin_api_key }
        version: { get_input: version }
        instance_description: { get_input: instance_description }
        export_dir: { get_input: export_dir }
        flavor: { get_input: flavor }
      requirements:
        - lrms: local_lrms
        - dependency: luks_encryption

    # type to describe a Galaxy not using any LRMS but using the local system
    local_lrms:
      type: tosca.nodes.indigo.LRMS.FrontEnd.Local
      requirements:
        - host: galaxy_server
        - dependency: luks_encryption
 
    galaxy_server:
      type: tosca.nodes.indigo.Compute
      properties:
        os_users: [ {os_user_name: 'testuser', os_user_guid: '4001', os_user_add_to_sudoers: True, os_user_ssh_public_key: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDrm8mxOuqwP5XTHf685V9rqRXXg41F4isJvRr4h3MPDs8PgqZBzzjxEFyGpJ/Rgg4ACesGBZy+CbVVGtOveltKvgkpzyHIrh+vMay9z82eK2LMZEfmEPgw1BHdRifPZ1Qb7Zmj1nRk1EMWoNvbBxEc3/MSorWb+2SVMs+42EZ7QxavBmsU7zNU0Nd0e1xiqJ00VDWMnXullp/ieR9M4/XsSlS3oqxsxkAbY3eQYVMsnh64oiRw3lpYBkPyNtC/VSL5Cqig3CMaiK9AW8FjP1GwwqoMjL0H0Mkr0fY8eSSQ9Tcy5AqyaiPn7tmG0fSeNOFwxGkTzrujqlCiOkRSM1Yj marco@MacBook-Pro-di-Marco.local'} ]
      capabilities:
        endpoint:
          properties:
            network_name: PUBLIC
            private_ip: false
            ports:
              galaxyctl_api_port:
                protocol: tcp
                source: 5001
              luks_api_port:
                protocol: tcp
                source: 5000
              http_port:
                protocol: tcp
                source: 80
              ftp_port:
                protocol: tcp
                source: 21
              ftp_passive:
                protocol: tcp
                source_range: [ 30000, 30009 ]
        # Host container properties
        host:
         properties:
           instance_type: { get_input: instance_flavor }
        # Guest Operating System properties
        os:
          properties:
            #image: ubuntu-16.04
            #image: centos-7-2003
            distribution: { get_input: os_distribution }
            version: { get_input: os_version }
      requirements:
        # contextually this can only be a relationship type
        - local_storage:
            # capability is provided by Compute Node Type
            node: my_block_storage
            capability: tosca.capabilities.Attachment
            relationship:
              type: tosca.relationships.AttachesTo
              properties:
                location: { get_input: export_dir }
                device: hdb

    my_block_storage:
      type: tosca.nodes.BlockStorage
      properties:
        size: { get_input: storage_size }

  outputs:
    endpoint:
      value: { concat: [ 'http://', get_attribute: [ galaxy_server, public_address, 0 ], '/galaxy' ] }
      #value: { concat: [ 'http://', get_attribute: [ galaxy_server, public_address, 0 ] ] }
    node_ip:
      value: { get_attribute: [ galaxy_server, public_address, 0 ] }
    os_users:
      value: { get_property: [ galaxy_server, os_users, 0 ] }
